// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo para los entrevistadores AI
model Interviewer {
  id            String     @id @default(cuid())
  externalId    String     @unique // ID del agente en Retell
  name          String
  language      String
  voiceId       String
  voiceProvider String     @default("elevenlabs")
  description   String?
  personality   String?
  instructions  String?
  isActive      Boolean    @default(true)
  userId        String     // Usuario de Clerk que lo creó
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  interviews    Interview[]
}

// Modelo para las entrevistas/llamadas
model Interview {
  id              String      @id @default(cuid())
  externalCallId  String      @unique // ID de la llamada en Retell
  interviewerId   String
  interviewer     Interviewer @relation(fields: [interviewerId], references: [externalId])
  
  candidateName   String?
  candidateEmail  String?
  candidatePhone  String
  position        String?     // Puesto para el que se entrevista
  
  status          String      // pending, in_progress, completed, failed
  startedAt       DateTime?
  endedAt         DateTime?
  duration        Int?        // Duración en segundos
  
  recordingUrl    String?
  transcript      String?     // JSON de la transcripción
  transcriptUrl   String?
  summary         String?
  endReason       String?
  
  userId          String      // Usuario de Clerk
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  analysis        InterviewAnalysis?
  metrics         InterviewMetrics?
}

// Modelo para el análisis de las entrevistas
model InterviewAnalysis {
  id              String    @id @default(cuid())
  interviewId     String    @unique
  interview       Interview @relation(fields: [interviewId], references: [externalCallId])
  
  sentimentScore  Float?    // Puntuación de sentimiento 0-1
  keyPoints       String?   // JSON array de puntos clave
  actionItems     String?   // JSON array de elementos de acción
  evaluation      String?   // JSON con evaluación detallada
  fullAnalysis    String?   // JSON con análisis completo
  
  strengths       String?   // Fortalezas identificadas
  weaknesses      String?   // Áreas de mejora
  recommendation  String?   // reject, maybe, recommend, strong_recommend
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Modelo para métricas de la entrevista
model InterviewMetrics {
  id              String    @id @default(cuid())
  interviewId     String    @unique
  interview       Interview @relation(fields: [interviewId], references: [externalCallId])
  
  totalQuestions  Int       // Número total de preguntas
  totalAnswers    Int       // Número total de respuestas
  avgAnswerLength Float     // Longitud promedio de respuesta (palabras)
  
  questions       String?   // JSON array de preguntas
  answers         String?   // JSON array de respuestas
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Modelo para plantillas de preguntas
model QuestionTemplate {
  id           String   @id @default(cuid())
  title        String
  position     String   // Puesto al que aplica
  category     String   // technical, behavioral, cultural
  questions    String   // JSON array de preguntas
  language     String   @default("en-US")
  
  userId       String   // Usuario que la creó
  isPublic     Boolean  @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Modelo para candidatos
model Candidate {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  phone        String?
  resume       String?  // URL del CV
  linkedIn     String?
  position     String?
  notes        String?
  
  userId       String   // Usuario de Clerk
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}